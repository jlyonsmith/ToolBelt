#!python
__version__ = "1.7.20401.3"

import os.path
import re
import datetime
import xml.etree.ElementTree as xmlDoc

InvalidCharacters = ".$*{}|<>"

class BuckleTool:
    def ProcessCommandLine(self):
        import argparse
        parser = argparse.ArgumentParser(
            description="Generates strongly typed wrappers for string and bitmap .resx resources")
        parser.add_argument("resxFileName", metavar = "RESXFILE")
        parser.add_argument(
            "-o", dest="csFileName", metavar = "CSFILE",
            help="Specify different name for .cs file.")
        parser.add_argument(
            "-r", dest="resourcesFileName", metavar = "RESOURCESFILE",
            help="Specify different name for .resources file.")
        parser.add_argument(
            "-n", dest="namespace",
            help="Namespace to use in generated C# class.")
        parser.add_argument(
            "-c", dest="className",
            help="Class name to use in generated C# class.")
        parser.add_argument(
            "-b", dest="basename",
            help="Alternate file basename that will be used instead of the namespace and class " +
                 "name to embed the .resources file in the assembly manifest.")
        parser.add_argument(
            "-w", dest="wrapperClassName", default = "ToolBelt.Message",
            help="String wrapper class. See Message.cs for details. Default is %(default)s")
        parser.add_argument(
            "-a", dest="modifier", default="public",
            help="Access modifier for properties and methods. Default is %(default)s")
        parser.add_argument(
            "-q", dest="noLogo", action="store_true",
            help="Suppress logo.")
        parser.add_argument(
            "-i", dest="incremental", action="store_true",
            help="incremental build. Create outputs only if out-of-date.")

        parser.parse_args(namespace = self)

        if not self.noLogo:
            print("Buckle ResX to C# String Wrapper Class Generator. Version " + __version__)
            print("Copyright (c) 2012, John Lyon-Smith.")

        if (self.csFileName is None):
            self.csFileName = os.path.splitext(self.resXFileName)[0] + ".cs"

        if (self.incremental):
            if (os.path.exists(self.csFileName) and
               (os.path.getmtime(self.resxFileName) < os.path.getmtime(self.csFileName))):
                return False

        if self.className is None:
            self.className = os.path.basename(self.resxFileName)

        return True

    def ReadResources(self):
        self.resources = xmlDoc.parse(self.resxFileName)
        self.haveDrawingResources = False
        root = self.resources.getroot()
        for elem in root.iter("assembly"):
            print(elem.tag, elem.get("alias"), elem.get("name"))

        for elem in root.iter("data"):
            # print elem.tag, elem.get("name"), elem.get("type")
            if ((elem.get("type") is not None) and
                    (elem.get("type").startswith("System.Drawing"))):
                self.haveDrawingResources = True

    def WriteCs(self):
        self.csFile = open(self.csFileName, "w")
        self.WriteNamespaceStart()
        self.WriteClassStart()

        num = 0
        root = self.resources.getroot()
        for elem in root.iter("data"):
            num += 1
            self.WriteResourceMethod(elem)

        self.WriteClassEnd()
        self.WriteNamespaceEnd()

        print("Generated wrapper class '%s' for %d resource(s)" % (self.csFileName, num))

    def WriteNamespaceStart(self):
        now = datetime.datetime.now()
        self.csFile.write(
            """//
// This file generated by the Buckle tool on %s at %s.
//
// Contains strongly typed wrappers for resources in %s
//

""" % (now.strftime("%m/%d/%Y"), now.strftime("%I:%M %p"), os.path.basename(self.resxFileName)))

        if self.namespace is not None:
            self.csFile.write("namespace %s {\n" % self.namespace)

        self.csFile.write(
            """using System;
using System.Reflection;
using System.Resources;
using System.Diagnostics;
using System.Globalization;
""")

        if self.haveDrawingResources:
            self.csFile.write("using System.Drawing;\n")

        self.csFile.write("\n")

    def WriteNamespaceEnd(self):
        if (self.namespace is not None) and (len(self.namespace) > 0):
            self.csFile.write("}\n")

    def WriteClassStart(self):
        self.csFile.write('''/// <summary>
/// Strongly typed resource wrappers generated from %(resx)s.
/// </summary>
%(modifier)s class %(className)s
{''' % {'resx': os.path.basename(self.resxFileName), 'modifier': self.modifier, 'className': self.className})

        if self.basename is None:
            self.csFile.write('''
    internal static readonly ResourceManager ResourceManager = new ResourceManager(typeof(%(class)s);
''' % {'class': self.className})
        else:
            self.csFile.write('''
    internal static readonly ResourceManager ResourceManager = new ResourceManager("%(base)s", Assembly.GetExecutingAssembly());
''' % {'base': self.basename})

    def WriteClassEnd(self):
        self.csFile.write("}\n")

    def WriteResourceMethod(self, elem):
        value = elem.find("value").text
        name = elem.get("name")
        for char in InvalidCharacters:
            name = name.replace(char, "_")
        try:
            paramCount = self.GetNumberOfParametersForStringResource(value)
        except Exception as exception:
            print("Error: Resource has been skipped: %s" % exception)
            return

        self.csFile.write("\n    /// <summary>\n")
        self.csFile.write("    /// %s\n" % value)
        self.csFile.write("    /// </summary>\n")

        if paramCount > 0:
            parametersWithTypes = ""
            parameters = ""
            for j in range(paramCount):
                str3 = ""
                if j > 0:
                    str3 = ", "
                parametersWithTypes = parametersWithTypes + \
                    str3 + "object param" + repr(j)
                parameters = parameters + str3 + "param" + repr(j)
            self.csFile.write("""    public static %s %s(%s)
    {
        Object[] o = { %s };
        return new %s("%s", typeof(%s), ResourceManager, o);
    }
""" % (self.wrapperClassName, name, parametersWithTypes, parameters, self.wrapperClassName, name, self.className))

        else:
            self.csFile.write("""    public static %s %s
    {
        get
        {
            return new %s("%s", typeof(%s), ResourceManager, null);
        }
    }
"""
            % (self.wrapperClassName, name, self.wrapperClassName, name, self.className))

    def GetNumberOfParametersForStringResource(self, resourceValue):
        regex = re.compile("(?P<value>\{[0-9]*\})")
        num = -1
        for match in regex.findall(resourceValue):
            try:
                num3 = int(match[1:-1])
                num = max(num, num3)
            except ValueError as exception:
                raise Exception(resourceValue + str(exception) + match[1:-1])
        return num + 1

if __name__ == '__main__':
    b = BuckleTool()
    if b.ProcessCommandLine():
        b.ReadResources()
        b.WriteCs()
