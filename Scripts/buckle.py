#!python

__version__ = "Feb. 2013"

import os.path
import re
import datetime
import xml.etree.ElementTree as xmlDoc

InvalidCharacters = ".$*{}|<>"


class BuckleTool:

    def ProcessCommandLine(self):
        import optparse
        parser = optparse.OptionParser()
        parser.set_description("Generates strongly typed wrappers for string and bitmap .resx resources")
        parser.add_option("-o", dest="Output_Cs",
                          help="Specify different name for .cs file.")
        parser.add_option("-n", dest="Namespace",
                          help="Namespace to use in generated C#.")
        parser.add_option("-b", dest="Basename",
                          help="The root name of the resource file without its extension " +
                               "but including any fully qualified namespace name. See " +
                               "ResourceManager constructor documentation for details.")
        parser.add_option("-w", dest="Wrapper_Class",
                          help="String wrapper class. See Message.cs for details.")
        parser.add_option("-a", dest="Modifier",
                          help="Access modifier for properties and methods.")
        parser.add_option("-q", dest="NoLogo", action="store_true",
                          help="Suppress logo.")
        parser.add_option("-i", dest="Incremental", action="store_true",
                          help="Incremental build. Create outputs only if out-of-date.")
        parser.remove_option("-h")
        parser.add_option("-h", dest="help", action="store_true",
                          help="Show help.")

        parser.set_usage("%prog [options] <resx-file>")
        options, args = parser.parse_args()

        if (not options.NoLogo):
            print "Buckle ResX to C# String Wrapper Class Generator. Version", __version__
            print "Copyright (c) 2012, John Lyon-Smith."

        if (options.help):
            parser.print_help()
            return False

        elif (len(args) == 0):
            print "Error: A .resx file must be specified"
            return False

        else:
            self.ResXFileName = args[0]
            if (options.Wrapper_Class is None):
                print "Error: A string wrapper class must be specified"
                return False

            self.Wrapper_Class = options.Wrapper_Class
            if (options.Output_Cs is None):
                self.CsFileName = os.path.splitext(
                    self.ResXFileName)[0] + ".cs"
            else:
                self.CsFileName = options.Output_Cs

            if (options.Incremental):
                if (os.path.exists(self.CsFileName) and
                   (os.path.getmtime(self.ResXFileName) < os.path.getmtime(self.CsFileName))):
                    return False

            if (options.Modifier is None):
                self.Modifier = "public"
            else:
                self.Modifier = options.Modifier

            self.Namespace = options.Namespace
            
            if (options.Basename is None):
                self.Basename = os.path.splitext(os.path.basename(self.ResXFileName))[0]
            else:
                self.Basename = options.Basename
            return True

    def ReadResources(self):
        self.resources = xmlDoc.parse(self.ResXFileName)
        self.haveDrawingResources = False
        root = self.resources.getroot()
        for elem in root.iter("assembly"):
            print elem.tag, elem.get("alias"), elem.get("name")

        for elem in root.iter("data"):
            #print elem.tag, elem.get("name"), elem.get("type")
            if ((elem.get("type") is not None) and 
                (elem.get("type").startswith("System.Drawing"))):
                self.haveDrawingResources = True

    def WriteCs(self):
        self.csfile = open(self.CsFileName, "w")
        self.WriteNamespaceStart()
        self.WriteClassStart()

        num = 0
        root = self.resources.getroot()
        for elem in root.iter("data"):
            num += 1
            self.WriteResourceMethod(elem)

        self.WriteClassEnd()
        self.WriteNamespaceEnd()

        print "Generated wrapper class '%s' for %d resource(s)" % (self.CsFileName, num)

    def WriteNamespaceStart(self):
        now = datetime.datetime.now()
        self.csfile.write(
            """//
// This file generated by the Buckle tool on %s at %s.
//
// Contains strongly typed wrappers for resources in %s
//

""" % (now.strftime("%m/%d/%Y"), now.strftime("%I:%M %p"), os.path.basename(self.ResXFileName)))

        if ((self.Namespace is not None) and (len(self.Namespace) > 0)):
            self.csfile.write("namespace %s {\n" % self.Namespace)

        self.csfile.write(
            """using System;
using System.Reflection;
using System.Resources;
using System.Diagnostics;
using System.Globalization;
""")

        if (self.haveDrawingResources):
            self.csfile.write("using System.Drawing;\n")

        self.csfile.write("\n")

    def WriteNamespaceEnd(self):
        if ((self.Namespace is not None) and (len(self.Namespace) > 0)):
            self.csfile.write("}\n")

    def WriteClassStart(self):
        self.csfile.write(
            """
/// <summary>
/// Strongly typed resource wrappers generated from %s.
/// </summary>
%s class %s
{
    internal static readonly ResourceManager ResourceManager = new ResourceManager("""
            %
            (os.path.basename(self.ResXFileName),
                self.Modifier,
                self.Basename))

        self.csfile.write("typeof(%s));\n" % self.Basename)


    def WriteClassEnd(self):
        self.csfile.write("}\n")

    def WriteResourceMethod(self, elem):
        value = elem.find("value").text
        name = elem.get("name")
        for char in InvalidCharacters:
            name = name.replace(char, "_")
        try:
            paramcount = self.GetNumberOfParametersForStringResource(value)
        except Exception, excpt:
            print "Error: Resource has been skipped:", excpt
            return

        self.csfile.write("\n    /// <summary>\n")
        self.csfile.write("    /// %s\n" % value)
        self.csfile.write("    /// </summary>\n")

        if (paramcount > 0):
            parametersWithTypes = ""
            parameters = ""
            for j in range(paramcount):
                str3 = ""
                if (j > 0):
                    str3 = ", "
                parametersWithTypes = parametersWithTypes + str3 + "object param" + repr(j)
                parameters = parameters + str3 + "param" + repr(j)
            self.csfile.write("""    public static %s %s(%s)
    {
        Object[] o = { %s };
        return new %s("%s", typeof(%s), ResourceManager, o);
    }
""" % (self.Wrapper_Class, name, parametersWithTypes, parameters,
       self.Wrapper_Class, name, self.Basename))

        else:

            self.csfile.write("""    public static %s %s
    {
        get
        {
            return new %s("%s", typeof(%s), ResourceManager, null);
        }
    }
""" % (self.Wrapper_Class, name, self.Wrapper_Class, name,
       self.Basename))

    def GetNumberOfParametersForStringResource(self, resourceValue):
        regex = re.compile("(?P<value>\{[0-9]*\})")
        num = -1
        for match in regex.findall(resourceValue):
            try:
                num3 = int(match[1:-1])
                num = max(num, num3)
            except ValueError, excpt:
                raise Exception(resourceValue + str(excpt) + match[1:-1])
        return num + 1

if __name__ == '__main__':
    b = BuckleTool()
    if (b.ProcessCommandLine()):
        b.ReadResources()
        b.WriteCs()
